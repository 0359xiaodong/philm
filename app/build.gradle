
buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.+'
    }
}
apply plugin: 'android'
apply plugin: 'crashlytics'
apply plugin: 'android-apt'

repositories {
    mavenCentral()
    maven { url 'http://download.crashlytics.com/maven' }
}

def buildTime() {
    return new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))
}

def versionMajor = 0
def versionMinor = 2
def versionPatch = 2
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"

    defaultConfig {
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        minSdkVersion 14
        targetSdkVersion 19

        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
    }

    signingConfigs {
        release {
        }
    }

    buildTypes {
        debug {
            runProguard false
            versionNameSuffix "-debug"
        }

        release {
            runProguard false
            proguardFile getDefaultProguardFile('proguard-android.txt')
            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        defaultFlavor {
            proguardFile 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile project(':lib')
    compile findProject(":lib").fileTree(dir: 'libs', include: '*.jar')

    compile 'com.android.support:support-v4:+'
    compile 'com.squareup.picasso:picasso:2.+'
    compile 'nl.qbusict:cupboard:1.+'
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile ("de.keyboardsurfer.android.widget:crouton:1.8.+@aar") {
        exclude group: 'com.google.android', module: 'support-v4'
    }
    compile 'com.github.castorflex.smoothprogressbar:library:0.3.+'

    apt 'com.squareup.dagger:dagger-compiler:1.+'

    compile fileTree(dir: 'libs', include: '*.jar')
}

File propFile = file('signing.properties');
if (propFile.exists()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
        android.buildTypes.release.signingConfig = null
}

